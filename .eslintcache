[{"/Users/woeser/Desktop/project/ppe_tenzin/src/App.js":"1","/Users/woeser/Desktop/project/ppe_tenzin/src/routes/Routes.js":"2","/Users/woeser/Desktop/project/ppe_tenzin/src/index.js":"3","/Users/woeser/Desktop/project/ppe_tenzin/src/reportWebVitals.js":"4","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Login.js":"5","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Dashboard.js":"6","/Users/woeser/Desktop/project/ppe_tenzin/src/firebase/firebase.js":"7","/Users/woeser/Desktop/project/ppe_tenzin/src/utils/Logout.js":"8","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Register.js":"9","/Users/woeser/Desktop/project/ppe_tenzin/src/components/WebCam.js":"10","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Profiles.js":"11","/Users/woeser/Desktop/project/ppe_tenzin/src/assets/NavBarIcons/EditIcon.js":"12","/Users/woeser/Desktop/project/ppe_tenzin/src/utils/ExportCsv.js":"13","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Settings.js":"14","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/IpCameraRegistration.js":"15","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/FrameThreshold.js":"16","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/Sensitivity.js":"17","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DvrRegistration.js":"18","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/LoginLogoutTime.js":"19","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/IpTable.js":"20","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DvrTable.js":"21","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PPESettings.js":"22","/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeTracking.js":"23","/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeAlertsCharts.js":"24","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Reports.js":"25","/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeAlertsReports.js":"26","/Users/woeser/Desktop/project/ppe_tenzin/src/components/AttendanceReports.js":"27","/Users/woeser/Desktop/project/ppe_tenzin/src/components/SocialDistance.js":"28","/Users/woeser/Desktop/project/ppe_tenzin/src/components/SocialDistanceLogs.js":"29","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Downloads.js":"30","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PpeWarning.js":"31","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PersonThreshold.js":"32","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PpeThreshold.js":"33","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DistanceTreshold.js":"34","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DetectionThreshold.js":"35","/Users/woeser/Desktop/project/ppe_tenzin/src/theme/Theme.js":"36","/Users/woeser/Desktop/project/ppe_tenzin/src/components/auth/AuthContext.js":"37"},{"size":365,"mtime":1607693061482,"results":"38","hashOfConfig":"39"},{"size":473,"mtime":1607693089545,"results":"40","hashOfConfig":"39"},{"size":501,"mtime":1607690274431,"results":"41","hashOfConfig":"39"},{"size":362,"mtime":1607336315172,"results":"42","hashOfConfig":"39"},{"size":6313,"mtime":1607693109964,"results":"43","hashOfConfig":"39"},{"size":10168,"mtime":1608270849614,"results":"44","hashOfConfig":"39"},{"size":716,"mtime":1605723159231,"results":"45","hashOfConfig":"39"},{"size":268,"mtime":1607407840969,"results":"46","hashOfConfig":"39"},{"size":14177,"mtime":1608286129842,"results":"47","hashOfConfig":"39"},{"size":989,"mtime":1607584703787,"results":"48","hashOfConfig":"39"},{"size":7015,"mtime":1607452022725,"results":"49","hashOfConfig":"39"},{"size":1799,"mtime":1605731740656,"results":"50","hashOfConfig":"39"},{"size":1257,"mtime":1607418712759,"results":"51","hashOfConfig":"39"},{"size":3694,"mtime":1607690623700,"results":"52","hashOfConfig":"39"},{"size":11877,"mtime":1608270578797,"results":"53","hashOfConfig":"39"},{"size":4026,"mtime":1606976938388,"results":"54","hashOfConfig":"39"},{"size":3537,"mtime":1608269029313,"results":"55","hashOfConfig":"39"},{"size":8910,"mtime":1608268263965,"results":"56","hashOfConfig":"39"},{"size":5241,"mtime":1608269213210,"results":"57","hashOfConfig":"39"},{"size":16784,"mtime":1608270656386,"results":"58","hashOfConfig":"39"},{"size":11291,"mtime":1608268434073,"results":"59","hashOfConfig":"39"},{"size":3055,"mtime":1607690684185,"results":"60","hashOfConfig":"39"},{"size":11366,"mtime":1607495462233,"results":"61","hashOfConfig":"39"},{"size":4861,"mtime":1607495597351,"results":"62","hashOfConfig":"39"},{"size":2559,"mtime":1607690804679,"results":"63","hashOfConfig":"39"},{"size":4046,"mtime":1607450239949,"results":"64","hashOfConfig":"39"},{"size":4012,"mtime":1607450209934,"results":"65","hashOfConfig":"39"},{"size":11329,"mtime":1607451212360,"results":"66","hashOfConfig":"39"},{"size":4654,"mtime":1607451678360,"results":"67","hashOfConfig":"39"},{"size":2307,"mtime":1607690821844,"results":"68","hashOfConfig":"39"},{"size":13604,"mtime":1608269409365,"results":"69","hashOfConfig":"39"},{"size":3655,"mtime":1608279071861,"results":"70","hashOfConfig":"39"},{"size":3663,"mtime":1608279074165,"results":"71","hashOfConfig":"39"},{"size":3684,"mtime":1608279062132,"results":"72","hashOfConfig":"39"},{"size":3664,"mtime":1608281509464,"results":"73","hashOfConfig":"39"},{"size":753,"mtime":1607690850947,"results":"74","hashOfConfig":"39"},{"size":1299,"mtime":1607692528867,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"g4n2te",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"78"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/Users/woeser/Desktop/project/ppe_tenzin/src/App.js",[],["169","170"],"/Users/woeser/Desktop/project/ppe_tenzin/src/routes/Routes.js",["171"],"import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from '../components/Login.js';\nimport Dashboard from '../components/Dashboard';\n\nexport default function Routes() {\n\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" component={Login} exact />\n                <Route path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n        </Router>\n    )\n}\n\n","/Users/woeser/Desktop/project/ppe_tenzin/src/index.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/reportWebVitals.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/Login.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/Dashboard.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/firebase/firebase.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/utils/Logout.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/Register.js",["172"],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/WebCam.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/Profiles.js",["173","174","175"],"import React, { useState } from 'react';\nimport { ExportCSV } from '../utils/ExportCsv'\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    Paper,\n    TableHead,\n    TableBody,\n    Table,\n    Typography,\n    Select,\n    MenuItem,\n    TextField,\n    makeStyles,\n    withStyles,\n    InputAdornment,\n    Box,\n} from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport {\n    Search,\n} from '@material-ui/icons'\n\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    },\n    checkOutButton: {\n        color: '#F72A1F',\n        backgroundColor: 'rgb(255, 164, 168, 0.3)',\n        borderRadius: 4,\n        fontWeight: 'bolder',\n    },\n    heading: {\n        marginBottom: theme.spacing(3)\n    },\n    textField: {\n        marginBottom: theme.spacing(2)\n    }\n}))\n\n\nexport default function Profiles() {\n    const classes = useStyles();\n\n    //All visitors state\n    const [employessLogs, setEmployessLogs] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n\n    //Filter functions\n    const [queryOption, queryBasedOn] = useState('Vname');\n    const [queryText, setQueryText] = useState('');\n    const handlerQuerytextChange = (e) => {\n        setQueryText(e.target.value);\n        const newData = employessLogs.filter((x) => (x[queryOption].toLowerCase().indexOf(queryText.toLowerCase()) >= 0));\n        setFilteredData(newData);\n    }\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage,\n            queryText === '' ? employessLogs.length - page * rowsPerPage\n                : filteredData.length - page * rowsPerPage\n        );\n\n    const SearchTextField = withStyles({\n        root: {\n            borderRadius: 20,\n        },\n    })(TextField);\n\n    //Table heading\n    const headings = [\n        'SL.No',\n        'PHOTO',\n        'ID',\n        'NAME',\n        'EMAIL & PHONE',\n        'BLOCKLIST',\n        'ACTION',\n    ]\n\n\n    return (\n        <Grid>\n            <Grid container >\n                <Grid item lg={12}>\n                    <Typography variant=\"h2\" className={classes.heading}>Employees Profile</Typography>\n                </Grid>\n                <Grid item lg={3}>\n                    <Box style={{ display: \"flex\" }}>\n                        <TextField\n                            label='Search for employee'\n                            onChange={(e) => handlerQuerytextChange(e)}\n                            name=\"queryText\"\n                            value={queryText}\n                            variant='outlined'\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position='start'>\n                                        <Search />\n                                    </InputAdornment>\n                                ),\n                            }}\n                            fullWidth\n\n                        />\n                        <ExportCSV csvData={employessLogs} fileName={'EmployeeInfo'} />\n                    </Box>\n                </Grid>\n                <Grid item lg={9}>\n                    <Grid container spacing={2} justify=\"flex-end\">\n                        <Grid item>\n                            <Typography className={classes.colorRed} ><b>Filter</b></Typography>\n                        </Grid>\n                        <Grid item>\n                            <Select\n                                value={queryOption}\n                                onChange={(e) => queryBasedOn(e.target.value)}\n                            >\n                                <MenuItem value={\"Vname\"}>Name</MenuItem>\n                                <MenuItem value={\"Vemail\"}>Email</MenuItem>\n\n                            </Select>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <TableContainer component={Paper} style={{ marginTop: \"2%\" }}>\n                <Table aria-label='custom pagination table'>\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\">\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            queryText === ''\n                                ? (rowsPerPage > 0\n                                    ? employessLogs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    : employessLogs\n                                ).map((row, index) => (\n                                    <TableRow key={index} >\n                                        <TableCell>\n\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                                : (rowsPerPage > 0\n                                    ? filteredData.slice(\n                                        page * rowsPerPage,\n                                        page * rowsPerPage + rowsPerPage\n                                    )\n                                    : filteredData\n                                ).map((row, index) => (\n                                    <TableRow key={index} >\n\n                                    </TableRow>\n                                ))\n                        }\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={employessLogs.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/assets/NavBarIcons/EditIcon.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/utils/ExportCsv.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/Settings.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/IpCameraRegistration.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/FrameThreshold.js",["176"],"import React, { useState, useEffect } from 'react';\n\n//Fireabse\nimport { firedb } from '../../firebase/firebase';\n\n//Mui\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FrameThreshold({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(\"\");\n    const [updatedValue, setUpdatedValue] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(e.target.value);\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)    //Update the sensitivity on submit\n            .doc('GeneralSettings')\n            .update({\n                \"FrameThreshold\": current\n            })\n            .then((res) => {\n                firedb\n                    .collection(`Clients_data/${clientId}/Settings/`)    //Update the loginlogout on submit\n                    .doc('GeneralSettings')\n                    .get()\n                    .then((res) => {\n                        setUpdatedValue(res.data().FrameThreshold)\n                    })\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)   //get the current sensitivity value\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().FrameThreshold)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current Threshold Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set threshold level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Threshold level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={0.5}>0.5</option>\n                            <option value={0.6}>0.6</option>\n                            <option value={0.7}>0.7</option>\n                            <option value={0.8}>0.8</option>\n                            <option value={0.9}>0.9</option>\n                            <option value={1}>1</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Sensitivity</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Threshold Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/Sensitivity.js",["177"],"import React, { useState, useEffect } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Sensitivity({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(\"\");\n    const [updatedValue, setUpdatedValue] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(e.target.value);\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .update({\n                \"DetectionSensitivity\": current\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)   //get the current sensitivity value\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().DetectionSensitivity)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current Sensitivity Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set Sensitivity level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Sensitivity level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={40}>40</option>\n                            <option value={140}>140</option>\n                            <option value={240}>240</option>\n                            <option value={320}>320</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Sensitivity</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Sensitivity Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DvrRegistration.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/LoginLogoutTime.js",["178"],"import React, { useState, useEffect } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport moment from 'moment'\nimport {\n    Grid,\n    Typography,\n    Box,\n    TextField,\n    Button,\n    makeStyles,\n    Snackbar,\n    Slide\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n    submit: {\n        marginTop: \"20px\"\n    },\n    longText: {\n        fontSize: \"29px\"\n    },\n    numberFont: {\n        fontSize: \"50px\"\n    }\n}))\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function LoginLogoutTime({ clientId }) {\n    const classes = useStyles();\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n    //form state\n    const [login, setLogin] = useState(\"\")\n    const [logout, setLogOut] = useState(\"\")\n    const [disabled, setDisabled] = useState(true);\n\n    //After updated value\n    const [updatedLogin, setUpdatedLogin] = useState(\"\")\n    const [updatedLogout, setUpdatedLogout] = useState(\"\")\n\n    const onChange = (e) => {\n        setLogin(e.target.value)\n        setDisabled(false);\n    }\n    const onChange1 = (e) => {\n        setDisabled(false);\n        setLogOut(e.target.value)\n        console.log(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)   //get the current login/logout value\n            .doc('GeneralSettings')\n            .update({\n                OfficeTimings: {\n                    login: login,\n                    logout: logout\n                }\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                alert(err.message)\n            })\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)   //get the current login/logout value\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedLogin(\n                    res.data().OfficeTimings.login\n                )\n                setUpdatedLogout(\n                    res.data().OfficeTimings.logout\n                )\n            })\n    }, [clientId]);\n\n    return (\n        <Grid container >\n            <Grid item xs={12}>\n                <Typography variant=\"h3\" align=\"center\">Current Office Timings</Typography>\n                <Typography align=\"center\" variant=\"h4\">\n                    {moment(updatedLogin, [\"HH.mm\"]).format(\"hh:mm A\")} - {moment(updatedLogout, [\"HH.mm\"]).format(\"hh:mm A\")}\n                </Typography>\n                <Box mt={2} align=\"center\" mx=\"auto\" style={{ maxWidth: \"550px\" }}>\n                    <Grid container spacing={2}>\n                        <Grid item lg={6}>\n                            <Typography variant=\"subtitle1\" align=\"center\">Set Login Time</Typography>\n                            <form>\n                                <TextField\n                                    type=\"time\"\n                                    name=\"loginTime\"\n                                    value={login}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    onChange={(e) => onChange(e)}\n                                />\n                            </form>\n                        </Grid>\n                        <Grid item lg={6}>\n                            <Typography variant=\"subtitle1\" align=\"center\"> Set Logout Time</Typography>\n                            <form>\n                                <TextField\n                                    type=\"time\"\n                                    name=\"logoutTime\"\n                                    value={logout}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    onChange={(e) => onChange1(e)}\n                                />\n                            </form>\n                        </Grid>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                            className={classes.submit}\n                            onClick={handleSubmit}\n                            disabled={disabled}\n                        >\n                            Set\n                    </Button>\n                    </Grid>\n                </Box>\n            </Grid>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Office Timing Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/IpTable.js",["179","180"],"import React, { useEffect, useState, useContext } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport EditIcon from '../../assets/NavBarIcons/EditIcon';\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    TableHead,\n    TableBody,\n    Table,\n    makeStyles,\n    Typography,\n    Button,\n    DialogContent,\n    Dialog,\n    Slide,\n    Snackbar,\n    FormControlLabel,\n    Checkbox,\n\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ValidatorForm, TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    },\n    textFiled: {\n        marginBottom: theme.spacing(2)\n    },\n}))\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function IpTable({ IpcameraDetails, clientId }) {\n    const classes = useStyles();\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //Modal state\n    const [modelOpen, setModelOpen] = useState(false);\n    const [socialDistance, setSocialDistance] = useState(false);\n    const [ppe, setPpe] = useState(false);\n    const [faceRecognation, setFaceRecognation] = useState(false);\n    const [editFormDate, setEditFormData] = useState({\n        editIpAddress: \"\",\n        editChannelName: \"\",\n        editHashtag: \"\",\n        editDepartment: \"\",\n        vid: \"\",\n        threshold: null,\n        frameRate: null,\n        type: \"\",\n    });\n    const onChangeEdit = (e) => setEditFormData({ ...editFormDate, [e.target.name]: e.target.value })\n    const { editChannelName, editDepartment, editIpAddress, editHashtag, threshold, frameRate, type } = editFormDate;\n\n    //Once modal is open set the form state\n    const setModalState = (Vid) => {\n        setModelOpen(true);\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/Camera_details/IPCameras/`)\n            .doc(Vid)\n            .get()\n            .then((res) => {\n                setEditFormData({\n                    editIpAddress: res.data().Ip_address,\n                    editChannelName: res.data().channel_name,\n                    editHashtag: res.data().Hashtag,\n                    editDepartment: res.data().Location,\n                    vid: Vid,\n                    threshold: res.data().Settings.det_threshold,\n                    frameRate: res.data().Settings.frame_rate,\n                    type: res.data().Settings.type,\n                })\n                setPpe(res.data().Settings.Service.ppe)\n                setSocialDistance(res.data().Settings.Service.social_distance)\n                setFaceRecognation(res.data().Settings.Service.face_recognition)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            })\n    }\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setModelOpen(false);\n        setSaveSuccess(false)\n    };\n\n    //Save the edit changes\n    const saveChanges = () => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/Camera_details/IPCameras/`)\n            .doc(editFormDate.vid)\n            .update(\n                {\n                    Ip_address: editFormDate.editIpAddress,\n                    channel_name: editFormDate.editChannelName,\n                    Hashtag: editFormDate.editHashtag,\n                    Location: editFormDate.editDepartment,\n                    \"Settings\": {\n                        \"Service\": {\n                            \"noteacher\": false,\n                            \"stayback\": false,\n                            \"face_recognition\": faceRecognation,\n                            \"ppe\": ppe,\n                            \"social_distance\": socialDistance\n                        },\n                        det_threshold: threshold,\n                        frame_rate: frameRate,\n                        type: type\n                    },\n                }\n            )\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            })\n    }\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, IpcameraDetails.length - page * rowsPerPage);\n\n\n    //Table heading\n    const headings = [\n        'Dvr Name',\n        'Camera',\n        'Location',\n        'Hashtag',\n        'Action'\n    ]\n\n    return (\n        <Grid>\n            <Typography align=\"center\" variant=\"subtitle1\" className={classes.heading}>Current IP Camera Configurations</Typography>\n            <TableContainer style={{ marginTop: \"2%\" }}>\n                <Table >\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\" className={classes.colorRed}>\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0\n                            ? IpcameraDetails.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : IpcameraDetails\n                        ).map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.DVR}</TableCell>\n                                <TableCell align=\"center\">{row.camera_name}</TableCell>\n                                <TableCell align=\"center\">{row.Location}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                                <TableCell align=\"center\">{\n                                    <Button\n                                        onClick={() => {\n                                            setModalState(row.Vid)\n                                            setModelOpen(true);\n                                        }}\n                                    >\n                                        <EditIcon />\n                                    </Button>\n                                }</TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={IpcameraDetails.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n\n            <Dialog\n                open={modelOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n            >\n                <DialogContent>\n                    <Typography variant=\"subtitle1\" className={classes.textFiled} align=\"center\">Edit IP Camera Configuration</Typography>\n                    <ValidatorForm>\n                        <Grid container spacing={2}>\n                            <Grid item lg={6}>\n                                <TextValidator\n                                    placeholder=\"IP Address\"\n                                    label=\"IP Address\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className={classes.textFiled}\n                                    name=\"editIpAddress\"\n                                    value={editIpAddress}\n                                    onChange={(e) => onChangeEdit(e)}\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item lg={6}>\n                                <TextValidator\n                                    placeholder=\"Channel Name\"\n                                    label=\"Channel Name\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className={classes.textFiled}\n                                    name=\"editChannelName\"\n                                    value={editChannelName}\n                                    onChange={(e) => onChangeEdit(e)}\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item lg={6}>\n                                <TextValidator\n                                    variant=\"outlined\"\n                                    id=\"Hashtag\"\n                                    label=\"Insert # Hashtag\"\n                                    fullWidth\n                                    name=\"editHashtag\"\n                                    autoComplete=\"Hashtag\"\n                                    onChange={e => onChangeEdit(e)}\n                                    value={editHashtag}\n                                    className={classes.textFiled}\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item lg={6}>\n                                <SelectValidator\n                                    SelectProps={{\n                                        native: true,\n                                    }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className={classes.textFiled}\n                                    name=\"editDepartment\"\n                                    value={editDepartment}\n                                    onChange={(e) => onChangeEdit(e)}\n                                    label=\"Department Name\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value={\"opd\"}>OPD</option>\n                                    <option value={\"icu\"}>ICU</option>\n                                    <option value={\"research room\"}>Research Romm</option>\n                                    <option value={\"cancer department\"}>Cancer Department</option>\n                                </SelectValidator>\n                            </Grid>\n                            <Grid item lg={6}>\n                                <SelectValidator\n                                    SelectProps={{\n                                        native: true,\n                                    }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className={classes.textFiled}\n                                    name=\"threshold\"\n                                    value={threshold}\n                                    onChange={(e) => onChangeEdit(e)}\n                                    label=\"Detection Threshold\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <option value={0.5}>0.5</option>\n                                    <option value={0.6}>0.6</option>\n                                    <option value={0.7}>0.7</option>\n                                    <option value={0.8}>0.8</option>\n                                    <option value={0.9}>0.9</option>\n                                    <option value={1}>1</option>\n                                </SelectValidator>\n                            </Grid>\n                            <Grid item lg={6}>\n                                <SelectValidator\n                                    SelectProps={{\n                                        native: true,\n                                    }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className={classes.textFiled}\n                                    name=\"frameRate\"\n                                    value={frameRate}\n                                    onChange={(e) => onChangeEdit(e)}\n                                    label=\"Frame Rate\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <option value={5}>5</option>\n                                    <option value={6}>6</option>\n                                    <option value={7}>7</option>\n                                    <option value={8}>8</option>\n                                    <option value={9}>9</option>\n                                    <option value={1}>1</option>\n                                </SelectValidator>\n                            </Grid>\n                        </Grid>\n                        <TextValidator\n                            variant=\"outlined\"\n                            label=\"Type\"\n                            fullWidth\n                            name=\"type\"\n                            onChange={e => onChangeEdit(e)}\n                            value={type}\n                            className={classes.textFiled}\n                            validators={['required']}\n                            errorMessages={['This field is required']}\n                        />\n                        <Typography variant=\"subtitle1\" align=\"center\">Service Subcribed for</Typography>\n                        <FormControlLabel\n                            control={<Checkbox checked={faceRecognation} onChange={() => setFaceRecognation(!faceRecognation)} />}\n                            label=\"Face Recognation \"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={ppe} onChange={() => { setPpe(!ppe) }} />}\n                            label=\"PPE\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={socialDistance} onChange={() => { setSocialDistance(!socialDistance) }} />}\n                            label=\"Social Distance\"\n                            className={classes.textFiled}\n                        />\n                        <Button\n                            type=\"submit\"\n                            onClick={() => { saveChanges() }}\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Save Changes\n                        </Button>\n                    </ValidatorForm>\n                </DialogContent>\n            </Dialog>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    IP Camera Edit successfull!\n                </Alert>\n            </Snackbar>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DvrTable.js",["181"],"import React, { useEffect, useState } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport EditIcon from '../../assets/NavBarIcons/EditIcon';\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    TableHead,\n    TableBody,\n    Table,\n    makeStyles,\n    Typography,\n    Button,\n    Dialog,\n    DialogContent,\n    Slide,\n    Snackbar\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n//Form validation\nimport { ValidatorForm, TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    },\n    textFiled: {\n        marginBottom: theme.spacing(2)\n    },\n}))\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DvrTable({ dvrData, clientId }) {\n    const classes = useStyles();\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //Modal state\n    const [modelOpen, setModelOpen] = useState(false);\n    const [editFormDate, setEditFormData] = useState({\n        editType: \"\",\n        editBrand: \"\",\n        editHardwareName: \"\",\n        editPort: \"\",\n        vid: \"\"\n    });\n    const onChangeEdit = (e) => setEditFormData({ ...editFormDate, [e.target.name]: e.target.value })\n    const { editBrand, editPort, editType, editHardwareName } = editFormDate;\n\n    //Once modal is open set the form state\n    const setModalState = (Vid) => {\n        setModelOpen(true);\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/Camera_details/DVR/`)\n            .doc(Vid)\n            .get()\n            .then((res) => {\n                setEditFormData({\n                    editType: res.data().type,\n                    editBrand: res.data().brand,\n                    editHardwareName: res.data().hardwarename,\n                    editPort: res.data().port,\n                    vid: Vid\n                })\n            })\n            .catch((err) => {\n                console.log(err.message)\n            })\n    }\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setModelOpen(false);\n        setSaveSuccess(false)\n    };\n\n    //Save the edit changes\n    const saveChanges = () => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/Camera_details/DVR/`)\n            .doc(editFormDate.vid)\n            .update(\n                {\n                    type: editFormDate.editType,\n                    brand: editFormDate.editBrand,\n                    hardwarename: editFormDate.editHardwareName,\n                    port: editFormDate.editPort\n                }\n            )\n            .then((res) => {\n                setSaveSuccess(true)\n                setEditFormData({\n                    editType: \"\",\n                    editBrand: \"\",\n                    editHardwareName: \"\",\n                    editPort: \"\",\n                })\n            })\n            .catch((err) => {\n                console.log(err.message)\n            })\n    }\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, dvrData.length - page * rowsPerPage);\n\n\n    //Table heading\n    const headings = [\n        ' TYPE',\n        'BRAND',\n        'HARDWARE',\n        'Time Logged',\n        'Action'\n    ]\n\n    return (\n        <Grid>\n            <Typography align=\"center\" variant=\"subtitle1\" className={classes.heading}>Current Dvr Configurations</Typography>\n            <TableContainer style={{ marginTop: \"2%\" }}>\n                <Table >\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\" className={classes.colorRed}>\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0\n                            ? dvrData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : dvrData\n                        ).map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.type}</TableCell>\n                                <TableCell align=\"center\">{row.brand}</TableCell>\n                                <TableCell align=\"center\">{row.hardwarename}</TableCell>\n                                <TableCell align=\"center\">{row.Timelogged}</TableCell>\n                                <TableCell align=\"center\">{\n                                    <Button\n                                        onClick={() => {\n                                            setModalState(row.Vid)\n                                            setModelOpen(true);\n                                        }}\n                                    >\n                                        <EditIcon />\n                                    </Button>\n                                }</TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={dvrData.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n\n            <Dialog\n                open={modelOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n            >\n                <DialogContent style={{ maxWidth: \"300px\" }}>\n                    <Typography variant=\"subtitle1\" className={classes.heading} align=\"center\">Edit DVR Configuration</Typography>\n                    <ValidatorForm>\n                        <SelectValidator\n                            SelectProps={{\n                                native: true,\n                            }}\n                            className={classes.textFiled}\n                            name=\"editType\"\n                            value={editType}\n                            onChange={(e) => onChangeEdit(e)}\n                            label=\"Type\"\n                            fullWidth\n                            variant=\"outlined\"\n                            placeholder=\"Type\"\n                            validators={[\"required\"]}\n                            errorMessages={[\"This field is required\"]}\n                        >\n                            <option value={\"Dvr\"}>DVR</option>\n                            <option value={\"Nvr\"}>NVR</option>\n                            <option value={\"Ip Camera\"}>IP Camera</option>\n                        </SelectValidator>\n\n                        <SelectValidator\n                            SelectProps={{\n                                native: true,\n                            }}\n                            fullWidth\n                            variant=\"outlined\"\n                            placeholder=\"Brand\"\n                            validators={[\"required\"]}\n                            errorMessages={[\"This field is required\"]}\n                            className={classes.textFiled}\n                            name=\"editBrand\"\n                            value={editBrand}\n                            onChange={(e) => onChangeEdit(e)}\n                            label=\"Brand\"\n                        >\n                            <option value={\"Hikvision\"}>Hikvision</option>\n                            <option value={\"CPplus\"}>CPplus</option>\n                            <option value={\"Zicom\"}>Zicom</option>\n                            <option value={\"MI\"}>MI</option>\n                            <option value={\"TP-Link\"}>TP-Link</option>\n                            <option value={\"iBall\"}>iBall</option>\n                            <option value={\"Srihome\"}>Srihome</option>\n                            <option value={\"Mobile Camera\"}>Mobile Camera</option>\n                        </SelectValidator>\n\n                        <TextValidator\n                            placeholder=\"Hardware Name\"\n                            label=\"Hardware Name\"\n                            fullWidth\n                            variant=\"outlined\"\n                            className={classes.textFiled}\n                            name=\"editHardwareName\"\n                            value={editHardwareName}\n                            onChange={(e) => onChangeEdit(e)}\n                            validators={['required']}\n                            errorMessages={['This field is required']}\n                        />\n                        <TextValidator\n                            placeholder=\"Port\"\n                            label=\"Port\"\n                            fullWidth\n                            variant=\"outlined\"\n                            className={classes.textFiled}\n\n                            validators={['required']}\n                            errorMessages={['This field is required']}\n                            name=\"editPort\"\n                            value={editPort}\n                            onChange={(e) => onChangeEdit(e)}\n\n                        />\n                        <Button\n                            type=\"submit\"\n                            onClick={() => { saveChanges() }}\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Save Changes\n                        </Button>\n                    </ValidatorForm>\n                </DialogContent>\n            </Dialog>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    DVR Edit successfull!\n                </Alert>\n            </Snackbar>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PPESettings.js",["182","183","184"],"import React, { useState, useContext } from 'react';\nimport {\n    Grid,\n    Typography,\n    withStyles,\n    Tabs,\n    Tab,\n    makeStyles,\n    Box\n} from '@material-ui/core';\nimport PpeWarnings from './PpeWarning';\nimport PersonThreshold from './PersonThreshold';\nimport PpeThreshold from './PpeThreshold';\nimport DistanceThreshold from './DistanceTreshold';\nimport DetectionThreshold from './DetectionThreshold';\n\n\nconst useStyles = makeStyles((theme) => ({\n    heading: {\n        marginBottom: theme.spacing(2)\n    }\n}))\n\nconst AntTabs = withStyles({\n    root: {\n        borderBottom: \"1px solid #e8e8e8\",\n    },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n    root: {\n        textTransform: \"none\",\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        \"&$selected\": {\n            color: \"#F72A1F\",\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n        \"&:focus\": {\n            color: \"#F72A1F\",\n        },\n    },\n    selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </div>\n    );\n}\n\nexport default function PpeSettings({ clientId }) {\n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Grid container>\n            <Grid item lg={12}>\n                <AntTabs\n                    value={value}\n                    onChange={handleChange}\n                >\n                    <AntTab label=\"PPE Warnings\" />\n                    <AntTab label=\"Person Threshold\" />\n                    <AntTab label=\"PPE Threshold\" />\n                    <AntTab label=\"Distance Threshold\" />\n                    <AntTab label=\"Detection Threshold\" />\n                </AntTabs>\n                <div style={{ marginTop: \"3%\" }}>\n                    <TabPanel value={value} index={0}>\n                        <PpeWarnings clientId={clientId} />\n                    </TabPanel>\n                    <TabPanel value={value} index={1}>\n                        <PersonThreshold clientId={clientId} />\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        <PpeThreshold clientId={clientId} />\n                    </TabPanel>\n                    <TabPanel value={value} index={3}>\n                        <DistanceThreshold clientId={clientId} />\n                    </TabPanel>\n                    <TabPanel value={value} index={4}>\n                        <DetectionThreshold clientId={clientId} />\n                    </TabPanel>\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeTracking.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeAlertsCharts.js",["185","186","187"],"import React, { useState } from 'react';\nimport PpeTracking from './PpeTracking';\nimport { Doughnut } from 'react-chartjs-2';\nimport Chart from \"chart.js\";\nimport {\n    Typography,\n    Grid,\n    Box,\n    Button,\n    makeStyles\n} from '@material-ui/core';\nimport {\n    ArrowBack\n} from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n    colorGrey: {\n        color: \"rgba(0,0,0,0.6)\"\n    },\n    marginBtm: {\n        marginBottom: theme.spacing(5)\n    }\n}));\nexport default function PpeAlertsCharts() {\n    const classes = useStyles();\n\n    const [Data, setData] = useState({\n        datasets: [\n            {\n                borderWidth: 1,\n                borderAlign: \"center\",\n                hoverBorderColor: \"white\",\n                backgroundColor: [\"#f05454\", \"#f7f5f8\"],\n                hoverBackgroundColor: [\"#f05454\", \"#f7f5f8\"],\n                data: [20, 100],\n            },\n        ],\n    });\n\n    const [options, setOptions] = useState({\n        tooltips: {\n            enabled: false,\n        },\n        cutoutPercentage: 80,\n        legend: {\n            display: false,\n        },\n        aspectRatio: 2,\n    });\n\n    Chart.pluginService.register({\n        beforeDraw: function (chart) {\n            var width = chart.chart.width,\n                height = chart.chart.height,\n                ctx = chart.chart.ctx;\n\n            ctx.restore();\n            var fontSize = (height / 114).toFixed(2);\n            ctx.font = fontSize + \"em sans-serif\";\n            ctx.textBaseline = \"middle\";\n\n            var text = \"20%\",\n                textX = Math.round((width - ctx.measureText(text).width) / 2),\n                textY = height / 2;\n\n            ctx.fillText(text, textX, textY);\n            ctx.save();\n        },\n    });\n\n    const [goBack, setGoBack] = useState(false)\n    if (goBack) {\n        return (\n            <PpeTracking />\n        )\n    }\n    return (\n        <Grid container spacing={2}>\n            <Grid item lg={12} className={classes.marginBtm}>\n                <Box textAlign=\"left\">\n                    <Button\n                        startIcon={<ArrowBack />}\n                        onClick={() => setGoBack(true)}\n                        color=\"primary\"\n                    >\n                        Go back\n                    </Button>\n                </Box>\n                <Typography variant=\"h1\" className={classes.colorGrey}>Location :\n                <span style={{ fontSize: \"19px\", fontWeight: \"500\", color: \"black\" }}> Surgery Room </span>\n                </Typography>\n            </Grid>\n\n            <Grid item lg={5} container direction=\"column\" justify=\"center\">\n                <Box align=\"center\">\n                    <Typography variant=\"h1\" className={classes.colorGrey} align=\"center\">Total People Detected  </Typography>\n                    <Typography variant=\"h4\">7</Typography>\n                </Box>\n            </Grid>\n            <Grid item lg={7}>\n                <Box >\n                    <Typography variant=\"subtitle1\" align=\"center\" className={classes.marginBtm}>\n                        PPE Alerts Detected On Persons\n                    </Typography>\n                    <Grid container spacing={2}>\n                        <Grid item lg={4} className={classes.marginBtm} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Body Suit</Typography>\n                        </Grid>\n                        <Grid item lg={4} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Boots</Typography>\n                        </Grid>\n                        <Grid item lg={4} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Gloves</Typography>\n                        </Grid>\n                        <Grid item lg={4} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Headgear</Typography>\n                        </Grid>\n                        <Grid item lg={4} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Mask</Typography>\n                        </Grid>\n                        <Grid item lg={4} className={classes.marginBtm}>\n                            <Doughnut data={Data} options={options} />\n                            <Typography align=\"center\">No  Safety Goggles</Typography>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Grid>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Reports.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/PpeAlertsReports.js",["188","189","190","191"],"import React, { useEffect, useState } from 'react';\nimport { firedb } from '../firebase/firebase';\nimport { ExportCSV } from '../utils/ExportCsv'\n\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    TableHead,\n    TableBody,\n    Table,\n    makeStyles,\n    Typography,\n    Paper\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    }\n}))\n\n\nexport default function PpeAlertsReports() {\n    const classes = useStyles();\n    const [ppeLogs, setPpeLogs] = useState([]);\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, ppeLogs.length - page * rowsPerPage);\n\n\n    //Table heading\n    const headings = [\n        'Total Persons',\n        'No Body Suite',\n        'No Boots',\n        'No Gloves',\n        'No HeadGear',\n        'No Mask',\n        'Stafety Googles',\n        'TimeStamp',\n    ]\n\n\n    return (\n        <Grid container>\n            <Grid item lg={12}>\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <Typography variant=\"subtitle1\">PPE Report Logs</Typography>\n                    </Grid>\n                    <Grid item>\n                        <ExportCSV csvData={ppeLogs} fileName={'EmployeeInfo'} />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <TableContainer component={Paper} style={{ marginTop: \"2%\" }}>\n                <Table >\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\">\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0\n                            ? ppeLogs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : ppeLogs\n                        ).map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.IPAddress}</TableCell>\n                                <TableCell align=\"center\">{row.Location}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                                <TableCell align=\"center\">{row.Timelogged}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={ppeLogs.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/AttendanceReports.js",["192","193","194","195"],"import React, { useEffect, useState } from 'react';\nimport { firedb } from '../firebase/firebase';\nimport { ExportCSV } from '../utils/ExportCsv'\n\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    TableHead,\n    TableBody,\n    Table,\n    makeStyles,\n    Typography,\n    Paper\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    }\n}))\n\n\nexport default function AttendanceReports() {\n    const classes = useStyles();\n    const [ppeLogs, setPpeLogs] = useState([]);\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, ppeLogs.length - page * rowsPerPage);\n\n\n    //Table heading\n    const headings = [\n        'Reg No',\n        'Name',\n        'Email/Phone',\n        'Department',\n        'Block List',\n        'Hashtag',\n        'Timestamp'\n    ]\n\n\n    return (\n        <Grid container>\n            <Grid item lg={12}>\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <Typography variant=\"subtitle1\">Daily Attendance Logs</Typography>\n                    </Grid>\n                    <Grid item>\n                        <ExportCSV csvData={ppeLogs} fileName={'EmployeeInfo'} />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <TableContainer component={Paper} style={{ marginTop: \"2%\" }}>\n                <Table >\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\">\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0\n                            ? ppeLogs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : ppeLogs\n                        ).map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.IPAddress}</TableCell>\n                                <TableCell align=\"center\">{row.Location}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                                <TableCell align=\"center\">{row.Timelogged}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={ppeLogs.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/SocialDistance.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/SocialDistanceLogs.js",["196","197","198","199"],"import React, { useEffect, useState } from 'react';\nimport { firedb } from '../firebase/firebase';\nimport { ExportCSV } from '../utils/ExportCsv';\nimport SocialDistance from './SocialDistance';\n\nimport {\n    TableRow,\n    TableCell,\n    TableFooter,\n    TablePagination,\n    Grid,\n    TableContainer,\n    TableHead,\n    TableBody,\n    Table,\n    makeStyles,\n    Typography,\n    Paper,\n    Box,\n    Button\n} from '@material-ui/core';\nimport {\n    ArrowBack\n} from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n    colorRed: {\n        color: \"#F72A1F\"\n    }\n}))\n\n\nexport default function SocialDistanceLogs() {\n    const classes = useStyles();\n    const [socialDistanceLogs, setSocialDistanceLogs] = useState([]);\n    const [goBack, setGoBack] = useState(false)\n\n    //Pagination task\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = e => {\n        setRowsPerPage(parseInt(e.target.value, 10));\n        setPage(0);\n    };\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, socialDistanceLogs.length - page * rowsPerPage);\n\n\n    //Table heading\n    const headings = [\n        'Thumbnail',\n        'IP Address',\n        'Hashtag',\n        'Timestamp'\n    ]\n\n    if (goBack) {\n        return (\n            <SocialDistance />\n        )\n    }\n    return (\n        <Grid container>\n            <Grid item lg={12}>\n                <Box textAlign=\"left\">\n                    <Button\n                        startIcon={<ArrowBack />}\n                        onClick={() => setGoBack(true)}\n                        color=\"primary\"\n                    >\n                        Go back\n                    </Button>\n                </Box>\n            </Grid>\n            <Grid item lg={12}>\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <Typography variant=\"subtitle1\">Social Distancing Logs</Typography>\n                    </Grid>\n                    <Grid item>\n                        <ExportCSV csvData={socialDistanceLogs} fileName={'EmployeeInfo'} />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <TableContainer component={Paper} style={{ marginTop: \"2%\" }}>\n                <Table >\n                    <TableHead>\n                        <TableRow >\n                            {\n                                headings.map((heading, index) => {\n                                    return (\n                                        <TableCell key={index} align=\"center\">\n                                            <b>{heading}</b>\n                                        </TableCell>\n                                    )\n                                })\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0\n                            ? socialDistanceLogs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : socialDistanceLogs\n                        ).map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell align=\"center\">{row.IPAddress}</TableCell>\n                                <TableCell align=\"center\">{row.Location}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                                <TableCell align=\"center\">{row.Timelogged}</TableCell>\n                                <TableCell align=\"center\">{row.Hashtag}</TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            count={socialDistanceLogs.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Grid >\n\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/Downloads.js",["200"],"import React, { useState, useContext } from 'react';\nimport {\n    Grid,\n    Typography,\n    withStyles,\n    Tabs,\n    Tab,\n    makeStyles,\n    Box\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    heading: {\n        marginBottom: theme.spacing(2)\n    }\n}))\n\nconst AntTabs = withStyles({\n    root: {\n        borderBottom: \"1px solid #e8e8e8\",\n    },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n    root: {\n        textTransform: \"none\",\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        \"&$selected\": {\n            color: \"#F72A1F\",\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n        \"&:focus\": {\n            color: \"#F72A1F\",\n        },\n    },\n    selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </div>\n    );\n}\n\nexport default function Downloads() {\n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n        <Grid container>\n            <Typography variant=\"h2\" className={classes.heading}>Download Your Monthly Reports</Typography>\n            <Grid item lg={12}>\n                <AntTabs\n                    value={value}\n                    onChange={handleChange}\n                >\n                    <AntTab label=\"Attendance Logs\" />\n                    <AntTab label=\"Social Disatancing Logs\" />\n                    <AntTab label=\"PPE Logs\" />\n                </AntTabs>\n                <div style={{ marginTop: \"3%\" }}>\n                    <TabPanel value={value} index={0}>\n\n                    </TabPanel>\n                    <TabPanel value={value} index={1}>\n\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n\n                    </TabPanel>\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PpeWarning.js",["201","202","203","204","205","206","207"],"import React, { useState, useEffect } from 'react'\nimport {\n    Grid,\n    Typography,\n    Box,\n    makeStyles,\n    Select,\n    MenuItem,\n    Divider,\n    Avatar,\n    Table,\n    TableBody,\n    TableHead,\n    TableFooter,\n    Button,\n    TableCell,\n    TableRow,\n    TextField,\n    Snackbar\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { firedb } from '../../firebase/firebase';\nimport hazmatSuit from '../../assets/images/hazmat-suit.jpg'\nimport gloves from '../../assets/images/gloves.jpeg'\nimport hardCap from '../../assets/images/hard-cap.jpg'\nimport faceShield from '../../assets/images/face-shield.jpg'\nimport boots from '../../assets/images/boots.jpeg'\nimport respirator from '../../assets/images/respirator.jpg'\n\nconst useStyles = makeStyles((theme) => ({\n    marginBtm: {\n        marginBottom: theme.spacing(4)\n    },\n    marginTB: {\n        margin: theme.spacing(3, 0, 3, 0)\n    }\n}))\nexport default function PpeWarning({ clientId }) {\n    const classes = useStyles();\n\n    const [saveSuccess, setSaveSuccess] = useState(false);\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    const [formData, setFormData] = useState({\n        ppeHazmatSuit: \"red\",\n        ppeGloves: \"red\",\n        ppeHardCap: \"yellow\",\n        ppeShield: \"red\",\n        ppeBoots: \"red\",\n        ppeRespirator: \"red\",\n        redMin: \"5\",\n        redSec: \"00\",\n        yellowMin: \"10\",\n        yellowSec: \"00\",\n    });\n    const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n    const { ppeBoots, ppeHazmatSuit, ppeShield, ppeRespirator, ppeHardCap, ppeGloves, redMin, redSec, yellowMin, yellowSec } = formData;\n    const dataPrep = {\n\n        \"hazmat_suit\": ppeHazmatSuit,\n        \"face_shield\": ppeShield,\n        \"gloves\": ppeGloves,\n        \"respirator\": ppeRespirator,\n        \"boots\": ppeBoots,\n        \"hard_cap\": ppeHardCap,\n        \"Time\": {\n            \"red\": `${redMin}:${redSec}`,\n            \"yellow\": `${yellowMin}:${yellowSec}`,\n        }\n\n    }\n    const handleSave = () => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .update({\n                \"PpeWarnings\": dataPrep\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n    }\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                const ppeData = res.data().PpeWarnings\n                const redTime = ppeData.Time.red.split(\":\")\n                const yellowTime = ppeData.Time.yellow.split(\":\")\n\n                setFormData({\n                    ppeHazmatSuit: ppeData.hazmat_suit,\n                    ppeGloves: ppeData.gloves,\n                    ppeHardCap: ppeData.hard_cap,\n                    ppeShield: ppeData.face_shield,\n                    ppeBoots: ppeData.boots,\n                    ppeRespirator: ppeData.respirator,\n                    redMin: redTime[0],\n                    redSec: redTime[1],\n                    yellowMin: yellowTime[0],\n                    yellowSec: yellowTime[1],\n                })\n            })\n    }, [clientId]);\n    return (\n        <Grid container spacing={2}>\n            <Grid item lg={6}>\n                <Typography variant=\"subtitle1\" className={classes.marginBtm}>Configure Your PPE Warning Types</Typography>\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={hazmatSuit} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Hazmat Suit</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeHazmatSuit\"\n                            value={ppeHazmatSuit}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.marginTB} />\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={gloves} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Gloves</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeGloves\"\n                            value={ppeGloves}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.marginTB} />\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={hardCap} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Hard Cap</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeHardCap\"\n                            value={ppeHardCap}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.marginTB} />\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={faceShield} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Face Shield</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeShield\"\n                            value={ppeShield}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.marginTB} />\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={boots} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Boots</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeBoots\"\n                            value={ppeBoots}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.marginTB} />\n                <Grid container>\n                    <Grid item lg={4}>\n                        <Box>\n                            <Avatar>\n                                <img src={respirator} width=\"100%\" />\n                            </Avatar>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={4} container direction=\"column\" justify=\"center\">\n                        <Typography>Respirators</Typography>\n                    </Grid>\n                    <Grid item lg={4}>\n                        <Select\n                            name=\"ppeRespirator\"\n                            value={ppeRespirator}\n                            onChange={(e) => onChange(e)}\n                        >\n                            <MenuItem value=\"red\">Red</MenuItem>\n                            <MenuItem value=\"yellow\">Yellow</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item lg={6}>\n                <Typography variant=\"subtitle1\" align=\"center\" className={classes.marginBtm}>Set Your PPE Warning Time</Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\"><b>Alert Type</b></TableCell>\n                            <TableCell align=\"center\"><b>Minutes</b></TableCell>\n                            <TableCell align=\"center\"><b>Seconds</b></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell align=\"center\">Red</TableCell>\n                            <TableCell align=\"center\">\n                                <TextField\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    label=\"Minutes\"\n                                    size=\"small\"\n                                    placeholder=\"5\"\n                                    name=\"redMin\"\n                                    value={redMin}\n                                    onChange={(e) => onChange(e)}\n                                />\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                <TextField\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    label=\"Seconds\"\n                                    size=\"small\"\n                                    placeholder=\"00\"\n                                    name=\"redSec\"\n                                    value={redSec}\n                                    onChange={(e) => onChange(e)}\n                                />\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell align=\"center\">Yellow</TableCell>\n                            <TableCell align=\"center\">\n                                <TextField\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    label=\"Minutes\"\n                                    size=\"small\"\n                                    placeholder=\"10\"\n                                    name=\"yellowMin\"\n                                    value={yellowMin}\n                                    onChange={(e) => onChange(e)}\n                                />\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                <TextField\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    label=\"Seconds\"\n                                    size=\"small\"\n                                    placeholder=\"20\"\n                                    name=\"yellowSec\"\n                                    value={yellowSec}\n                                    onChange={(e) => onChange(e)}\n                                />\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Box align=\"center\">\n                    <Button\n                        fullWidth\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save Settings\n                        </Button>\n                </Box>\n            </Grid>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    PPE warnings saved !\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PersonThreshold.js",["208"],"import React, { useState, useEffect } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PersonThreshold({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(0);\n    const [updatedValue, setUpdatedValue] = useState(0);\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(parseFloat(e.target.value));\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings/')\n            .update({\n                \"PpeSettings.person_threshold\": current\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings/')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().PpeSettings.person_threshold)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current Person Threshold Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set person threshold level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Threshold level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={0.5}>0.5</option>\n                            <option value={0.6}>0.6</option>\n                            <option value={0.7}>0.7</option>\n                            <option value={0.8}>0.8</option>\n                            <option value={0.9}>0.9</option>\n                            <option value={1}>1</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Threshold</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Threshold Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/PpeThreshold.js",["209"],"import React, { useState, useEffect } from 'react';\n\n//Fireabse\nimport { firedb } from '../../firebase/firebase';\n\n//Mui\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PpeThreshold({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(null);\n    const [updatedValue, setUpdatedValue] = useState(null)\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(parseFloat(e.target.value));\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings/')\n            .update({\n                \"PpeSettings.ppe_threshold\": current\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().PpeSettings.ppe_threshold)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current PPE Threshold Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set PPE threshold level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Threshold level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={0.5}>0.5</option>\n                            <option value={0.6}>0.6</option>\n                            <option value={0.7}>0.7</option>\n                            <option value={0.8}>0.8</option>\n                            <option value={0.9}>0.9</option>\n                            <option value={1}>1</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Threshold</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Threshold Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DistanceTreshold.js",["210"],"import React, { useState, useEffect } from 'react';\n\n//Fireabse\nimport { firedb } from '../../firebase/firebase';\n\n//Mui\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DistanceThreshold({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(\"\");\n    const [updatedValue, setUpdatedValue] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(parseFloat(e.target.value));\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .update({\n                \"PpeSettings.distance_threshold\": current\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().PpeSettings.distance_threshold)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current Distance Threshold Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set Distance threshold level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Threshold level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={0.5}>0.5</option>\n                            <option value={0.6}>0.6</option>\n                            <option value={0.7}>0.7</option>\n                            <option value={0.8}>0.8</option>\n                            <option value={0.9}>0.9</option>\n                            <option value={1}>1</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Threshold</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Threshold Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/components/subsettings/DetectionThreshold.js",["211"],"import React, { useState, useEffect } from 'react';\nimport { firedb } from '../../firebase/firebase';\nimport {\n    Grid,\n    Typography,\n    Box,\n    FormControl,\n    Select,\n    Button,\n    InputLabel,\n    Snackbar,\n    Slide\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab';\n\n//Modal transition\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DetectionThreshold({ clientId }) {\n\n    //Snackbar state\n    const [saveSuccess, setSaveSuccess] = useState(false);\n\n    //SNACK BAR CLOSE\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSaveSuccess(false)\n    };\n\n    //Form state\n    const [current, setCurrent] = useState(\"\");\n    const [updatedValue, setUpdatedValue] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n\n    const onChange = (e) => {\n        setCurrent(parseFloat(e.target.value));\n        setDisabled(false);\n    };\n    const handleSubmit = (e) => {\n\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .update({\n                \"PpeSettings.det_threshold\": current\n            })\n            .then((res) => {\n                setSaveSuccess(true)\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n\n        setDisabled(true);\n\n    };\n\n    useEffect(() => {\n        firedb\n            .collection(`Clients_data/${clientId}/Settings/`)\n            .doc('GeneralSettings')\n            .onSnapshot((res) => {\n                setUpdatedValue(res.data().PpeSettings.detection_threshold)\n            })\n    }, [clientId]);\n    return (\n        <Grid>\n            <Typography variant=\"h3\" align=\"center\">Current Detection Threshold Level</Typography>\n            <Typography variant=\"h4\" align=\"center\">{updatedValue}</Typography>\n            <Typography variant=\"subtitle1\" align=\"center\">Set detection threshold level</Typography>\n            <Box mx=\"auto\" style={{ maxWidth: \"200px\" }} align=\"center\">\n                <form>\n                    <FormControl variant='outlined' fullWidth margin=\"normal\">\n                        <InputLabel fullWidth>Threshold level</InputLabel>\n                        <Select\n                            native\n                            name=\"current\"\n                            value={current}\n                            onChange={(e) => onChange(e)}\n                            label='Sensitivity level'\n                        >\n                            <option value={0.5}>0.5</option>\n                            <option value={0.6}>0.6</option>\n                            <option value={0.7}>0.7</option>\n                            <option value={0.8}>0.8</option>\n                            <option value={0.9}>0.9</option>\n                            <option value={1}>1</option>\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={(e) => handleSubmit(e)}\n                        disabled={disabled}\n                        fullWidth\n                    >Set Threshold</Button>\n                </form>\n            </Box>\n            <Snackbar open={saveSuccess} autoHideDuration={6000} onClose={handleClose} >\n                <Alert onClose={handleClose} severity=\"success\">\n                    Threshold Level Changed!\n                </Alert>\n            </Snackbar>\n        </Grid>\n    )\n}\n","/Users/woeser/Desktop/project/ppe_tenzin/src/theme/Theme.js",[],"/Users/woeser/Desktop/project/ppe_tenzin/src/components/auth/AuthContext.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":27},{"ruleId":"220","severity":1,"message":"221","line":149,"column":33,"nodeType":"222","endLine":149,"endColumn":77},{"ruleId":"216","severity":1,"message":"223","line":23,"column":10,"nodeType":"218","messageId":"219","endLine":23,"endColumn":18},{"ruleId":"216","severity":1,"message":"224","line":52,"column":27,"nodeType":"218","messageId":"219","endLine":52,"endColumn":43},{"ruleId":"216","severity":1,"message":"225","line":81,"column":11,"nodeType":"218","messageId":"219","endLine":81,"endColumn":26},{"ruleId":"216","severity":1,"message":"226","line":21,"column":7,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"226","line":17,"column":7,"nodeType":"218","messageId":"219","endLine":17,"endColumn":17},{"ruleId":"216","severity":1,"message":"226","line":29,"column":7,"nodeType":"218","messageId":"219","endLine":29,"endColumn":17},{"ruleId":"216","severity":1,"message":"227","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"217","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":48},{"ruleId":"216","severity":1,"message":"227","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"217","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":37},{"ruleId":"216","severity":1,"message":"228","line":4,"column":5,"nodeType":"218","messageId":"219","endLine":4,"endColumn":15},{"ruleId":"216","severity":1,"message":"229","line":64,"column":11,"nodeType":"218","messageId":"219","endLine":64,"endColumn":18},{"ruleId":"216","severity":1,"message":"230","line":27,"column":18,"nodeType":"218","messageId":"219","endLine":27,"endColumn":25},{"ruleId":"216","severity":1,"message":"231","line":40,"column":21,"nodeType":"218","messageId":"219","endLine":40,"endColumn":31},{"ruleId":"232","severity":1,"message":"233","line":106,"column":73,"nodeType":"234","endLine":106,"endColumn":102},{"ruleId":"216","severity":1,"message":"227","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"235","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":16},{"ruleId":"216","severity":1,"message":"229","line":28,"column":11,"nodeType":"218","messageId":"219","endLine":28,"endColumn":18},{"ruleId":"216","severity":1,"message":"236","line":29,"column":21,"nodeType":"218","messageId":"219","endLine":29,"endColumn":31},{"ruleId":"216","severity":1,"message":"227","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"235","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":16},{"ruleId":"216","severity":1,"message":"229","line":28,"column":11,"nodeType":"218","messageId":"219","endLine":28,"endColumn":18},{"ruleId":"216","severity":1,"message":"236","line":29,"column":21,"nodeType":"218","messageId":"219","endLine":29,"endColumn":31},{"ruleId":"216","severity":1,"message":"227","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"235","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":16},{"ruleId":"216","severity":1,"message":"229","line":34,"column":11,"nodeType":"218","messageId":"219","endLine":34,"endColumn":18},{"ruleId":"216","severity":1,"message":"237","line":35,"column":32,"nodeType":"218","messageId":"219","endLine":35,"endColumn":53},{"ruleId":"216","severity":1,"message":"238","line":67,"column":11,"nodeType":"218","messageId":"219","endLine":67,"endColumn":19},{"ruleId":"216","severity":1,"message":"239","line":14,"column":5,"nodeType":"218","messageId":"219","endLine":14,"endColumn":16},{"ruleId":"240","severity":1,"message":"241","line":122,"column":33,"nodeType":"222","endLine":122,"endColumn":70},{"ruleId":"240","severity":1,"message":"241","line":145,"column":33,"nodeType":"222","endLine":145,"endColumn":66},{"ruleId":"240","severity":1,"message":"241","line":168,"column":33,"nodeType":"222","endLine":168,"endColumn":67},{"ruleId":"240","severity":1,"message":"241","line":191,"column":33,"nodeType":"222","endLine":191,"endColumn":70},{"ruleId":"240","severity":1,"message":"241","line":214,"column":33,"nodeType":"222","endLine":214,"endColumn":65},{"ruleId":"240","severity":1,"message":"241","line":237,"column":33,"nodeType":"222","endLine":237,"endColumn":70},{"ruleId":"216","severity":1,"message":"226","line":17,"column":7,"nodeType":"218","messageId":"219","endLine":17,"endColumn":17},{"ruleId":"216","severity":1,"message":"226","line":21,"column":7,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"226","line":21,"column":7,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"226","line":17,"column":7,"nodeType":"218","messageId":"219","endLine":17,"endColumn":17},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Skeleton' is defined but never used.","'setEmployessLogs' is assigned a value but never used.","'SearchTextField' is assigned a value but never used.","'Transition' is assigned a value but never used.","'useEffect' is defined but never used.","'Typography' is defined but never used.","'classes' is assigned a value but never used.","'setData' is assigned a value but never used.","'setOptions' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'firedb' is defined but never used.","'setPpeLogs' is assigned a value but never used.","'setSocialDistanceLogs' is assigned a value but never used.","'clientId' is assigned a value but never used.","'TableFooter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]